<?php
/**
 * Functions and APIs for logging in a user via pinserver
 *
 * PIN workflow:
 * anonymous user visits user -> user/pin -> pinserver -> PIN has user account -> redirect to $destination
 *                                                     -> PIN has no account
 *                                                            V
 *                                    -----------------------------------------------------------------
 *                                   V                                      V                         V
 *                              User wants to link account      User wants to create site        User wants to cancel
 *                                   V                                     V                           V
 *                             user/login                        site/register                user/pin/cancel
 *                                   V                                    V                            V
 *                              User logs in                     User creates site                Clear pin session
 *                                   V                                    V                            V
 *                              Link PIN with UID               Link PIN with new UID              Redirect to $destination
 *                                   V                                    V                            |
 *                           Redirect to $destination           Redirect to site                       |
 *                                   |                                    |                            |
 *                                   --------------------------------|  Done  |-------------------------
 *
 * Authenticated users cannot access user/pin.
 */

/**
 * Implements hook_menu().
 */
function pinserver_authenticate_menu() {
  $items = array();

  $items['user/pin'] = array(
    'title' => 'Log in via PIN',
    'page callback' => 'pinserver_authenticate_pin_user_login',
    'access callback' => 'pinserver_authenticate_user_login_access',
    'type' => MENU_LOCAL_TASK,
    'file' => 'pinserver_authenticate.pages.inc',
  );

  $items['user/pin/create'] = array(
    'title' => 'Create user from PIN',
    'page callback' => 'pinserver_authenticate_user_create',
    'access callback' => 'pinserver_authenticate_user_login_access',
    'file' => 'pinserver_authenticate.pages.inc',
  );

  $items['user/pin/cancel'] = array(
    'title' => 'Cancel op',
    'page callback' => 'pinserver_authenticate_cancel',
    'access callback' => TRUE,
    'file' => 'pinserver_authenticate.pages.inc'
  );

  return $items;
}

/**
 * Refuse access to users that have authenticated.
 * Because that makes no sense.
 * @return bool
 */
function pinserver_authenticate_user_login_access() {
  if (user_is_logged_in()) {
    return false;
  }

  return true;
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Removes the PIN login button if they've already logged in to PIN.
 * They are redirected to user/login after authing with PIN if they've elected
 * to link an existing account to this PIN. We don't present them with the
 * Login via PIN link in this case
 */
function pinserver_authenticate_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'user') {
    $tabs = &$data['tabs'][0]['output'];
    foreach ($tabs as $k => $t) {
      if ($t['#link']['path'] == 'user/pin') {
        $tabs[$k]['#link']['localized_options']['query'] = drupal_get_destination();
        if (pinserver_get_user_huid()) {
          unset($tabs[$k]);
        }
      }
    }
  }
}

/**
 * Given a PIN, get the user's UID or false
 */
function pinserver_authenticate_get_uid_from_huid($huid = NULL) {
  if (!$huid){
    $huid = pinserver_get_user_huid();
  }

  if ($huid) {
    $or = db_or()
      ->condition('huid', $huid)
      ->condition('hashID', $huid);
    return db_select('pinserver_users', 'pu')
      ->fields('pu', array('uid'))
      ->condition($or)
      ->execute()
      ->fetchField();
  }

  return FALSE;
}

/**
 * Links a PIN and UID together
 */
function pinserver_authenticate_set_user_huid($uid, $huid) {
  $fields = array(
    'reg_time' => REQUEST_TIME
  );
  if (strlen($huid) > 10) {
    $fields['hashID'] = $huid;
  }
  else {
    $fields['huid'] = $huid;
  }

  try {
    db_merge('pinserver_users')
      ->key(array('uid' => $uid))
      ->fields($fields)
      ->execute();
    return true;
  }
  catch (Exception $e) {
    drupal_set_message('Error linking HUID with OpenScholar account');
    error_log($e->getMessage());
    return false;
  }
}

/**
 * Implements hook_user_login().
 *
 * Associates the active PIN user with the Drupal user that was just logged in to.
 * Only does this is there is a PIN user and no linkage has been established already
 */
function pinserver_authenticate_user_login(&$user, $account) {
  if ($huid = pinserver_get_user_huid()) {
    if (!pinserver_authenticate_get_uid_from_huid($huid)) {
      pinserver_authenticate_set_user_huid($account->uid, $huid);
    }
  }
}